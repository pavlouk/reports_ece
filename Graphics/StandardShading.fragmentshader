#version 330 core

// Interpolated values from the vertex shaders
in vec3 vertex_position_modelspace;
in vec3 vertex_normal_modelspace;
in vec2 vertex_UV;
in vec4 vertex_position_lightspace;

uniform int useTexture = 0;
uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;
uniform sampler2D shadowMap;
uniform mat4 V;
uniform mat4 M;

// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};
uniform Light light;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
	vec3 normal = normalize(transpose(inverse(mat3(M)))*vertex_normal_modelspace);
	vec3 lightDir = normalize(light.lightPosition_worldspace - vertex_position_modelspace);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
	float shadow = 0.0;

	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;

    // check whether current frag pos is in shadow
	if(projCoords.z > 1.0){
		shadow = 0.0;
	}
	return shadow; 
}  

// materials
struct Material {
    vec4 Ka;
    vec4 Kd;
    vec4 Ks;
    float Ns;
};
uniform Material mtl;

// Output data
out vec4 fragmentColor;

void phong();

void main()
{
    vec3 Ks = vec3(texture(specularColorSampler, vertex_UV).rgb);
    vec3 Kd = vec3(texture(diffuseColorSampler, vertex_UV).rgb);
    vec3 Ka = mtl.Ka.xyz;
    float Ns = mtl.Ns;

	vec3 La = light.La.xyz;
	vec3 Ld = light.Ld.xyz;
	vec3 Ls = light.Ls.xyz;

	vec4 light_position_cameraspace = V * vec4(light.lightPosition_worldspace,1);
	vec4 vertex_position_cameraspace  = V * M * vec4(vertex_position_modelspace,1);
	vec4 vertex_normal_cameraspace  = normalize( V * M * vec4(vertex_normal_modelspace,0));

	vec4 L = normalize(light_position_cameraspace -  vertex_position_cameraspace);
	float costheta = clamp(dot(L,vertex_normal_cameraspace), 0, 1);

	vec4 R = normalize(reflect(-L,vertex_normal_cameraspace));
	vec4 E = normalize(- vertex_position_cameraspace);
	float cosalpha = clamp(dot(E,R), 0, 1);
	float specular_factor = pow(cosalpha,Ns);

   	vec3 Ia = Ka * La;
	vec3 Id = Ld * Kd * costheta;
	vec3 Is = Ls * Ks * specular_factor;

	float distance = length(light_position_cameraspace - vertex_position_cameraspace);
	Id = Id * light.power/pow(distance, 2);
	Is = Is * light.power/pow(distance, 2);
	
	float shadow = ShadowCalculation(vertex_position_lightspace);
	Id = Id * (1.0 - shadow);
	Is = Is * (1.0 - shadow);
	fragmentColor = vec4(Ia + Id + Is, 1);



	/////////////////////////////////////////////////////////////////
	//to use shadow mapping comment the phong function here
	phong();
	/////////////////////////////////////////////////////////////////


}

void phong() {
    vec4 _Ks = mtl.Ks;
    vec4 _Kd = mtl.Kd;
    vec4 _Ka = mtl.Ka;
    float _Ns = mtl.Ns;
    // use texture for materials
    if (useTexture == 0) {
        _Ks = vec4(texture(specularColorSampler, vertex_UV).rgb, 1.0);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
        _Ka = vec4(0.1, 0.1, 0.1, 1.0);
        _Ns = 10;
    }

    // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;

	vec4 vertex_normal_cameraspace  = normalize( V * M * vec4(vertex_normal_modelspace,0));
	vec4 vertex_position_cameraspace  = V * M * vec4(vertex_position_modelspace,1);

    // model diffuse intensity (Id)
    vec3 N = normalize(vertex_normal_cameraspace.xyz);
    vec3 L = normalize((V * vec4(light.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace.xyz);
    float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta;

    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace.xyz);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;

    //model the light distance effect
    float distance = length(light.lightPosition_worldspace - vertex_position_modelspace);
    float distance_sq = distance * distance;

    // final fragment color
    fragmentColor = vec4(
        Ia +
        Id * light.power / distance_sq +
        Is * light.power / distance_sq);
}
