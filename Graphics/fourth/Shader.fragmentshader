#version 330 core

// output data
out vec4 color;

// Task 3.2c FS: get vertex position from VS 
in vec4 vertexPosition_worldspace;

// Task 3.2d FS: get the coefficients of the plane from main program (uniform vec4) 
uniform vec4 planeCoeffs;

// Task 4.1b FS:
uniform vec3 detachmentDisplacement;
 
void main()
{
    color = vec4(0.0, 0.0, 0.0, 1.0);

    // Task 3.2e FS: find on which side of the plane is the vertex and
    // apply different colors (red above 0.02, blue below -0.02 else blue)
    /*/
    if (dot(planeCoeffs, vertexPosition_worldspace) > 0)
    {
        color = vec4(1.0, 0.0, 0.0, 1.0);
    }
    else if (dot(planeCoeffs, vertexPosition_worldspace) < 0)
    {
        color = vec4(0.0, 1.0, 0.0, 1.0);
    }
    else
    {
        color = vec4(0.0, 0.0, 1.0, 1.0);
    }
    //*/

    // Task 3.3 FS: color the model based on the vertex position and make the
    // lower part vanish (use alpha)
    /*/
    if (dot(planeCoeffs, vertexPosition_worldspace) > 0.02)
    {
        color = vec4(vertexPosition_worldspace.x, vertexPosition_worldspace.y, vertexPosition_worldspace.z, 1.0);
    }
    else if (dot(planeCoeffs, vertexPosition_worldspace) < -0.02)
    {
        color = vec4(vertexPosition_worldspace.x, vertexPosition_worldspace.y, vertexPosition_worldspace.z, 0.2);
    }
    else
    {
        color = vec4(0.0, 0.0, 1.0, 1.0);
    }
    //*/
    // Homework 1: assign color based on distance from plane


    // Task 4.1d: discard the fragments that are between the two halves
    //*/
    if (dot(planeCoeffs, vertexPosition_worldspace) < detachmentDisplacement.y && dot(planeCoeffs, vertexPosition_worldspace) > -detachmentDisplacement.y)
    {
        discard;
    }
    else
    {
        color = vec4(vertexPosition_worldspace.x, vertexPosition_worldspace.y, vertexPosition_worldspace.z, 1.0);;
    }
    //*/
    
    

}
