#version 330 core

// interpolated values from the vertex shaders (vertex_position_modelspace, 
// vertex_normal_modelspace and vertex_UV coordinates)
in vec3 vertex_position_modelspace;
//implement flat shading
flat in vec3 vertex_normal_modelspace;
//in vec3 vertex_normal_modelspace;
in vec2 vertex_UV;

// uniform variables (lightPosition_worldspace, V, M)
uniform vec3 light_position_worldspace;
uniform mat4 V;
uniform mat4 M;

// Task 5.3: define uniform variables for the texture coordinates
// (diffuseColorSampler, specularColorSampler)
uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;
// Homework 2

uniform vec3 Ka;
uniform vec3 Kd;
uniform vec3 Ks;
uniform float Ns;

uniform vec3 La;
uniform vec3 Ld;
uniform vec3 Ls;

// output data
out vec4 fragment_color;

void main()
{
    // default color
    fragment_color = vec4(1, 1, 1, 1);
    
    // Task 2.1: model light; specular (Ls), diffuse (Ld) and ambient (La) color
    /*
	vec3 La = vec3(1, 1, 1);
	vec3 Ld = vec3(1, 1, 1);
	vec3 Ls = vec3(1, 1, 1);
    // Task 2.2: model material properties; specular (Ks), diffuse (Kd), 
    // ambient (Ka) color and specular exponent (Ns) (gold material)
    /* Gold
        specular  0.628281, 0.555802, 0.366065
        diffuse   0.75164, 0.60648, 0.22648
        ambient   0.24725, 0.24725, 0.0745
        shininess 51.2
    */
    /*
	vec3 Ka = vec3(0.24725, 0.24725, 0.0745);
	vec3 Kd = vec3(0.75164, 0.60648, 0.22648);
	vec3 Ks = vec3(0.628281, 0.555802, 0.366065);
	float Ns = 21.2;
     */
    // Homework 2: make model materials as uniform variables and display multiple 
    // instances of the model with different materials
    // http://www.barradeau.com/nicoptere/dump/materials.html

    // Task 6.5: assign material properties from the texture maps
    //*/
	// gia ena mati antanaklash kanw edit sto paint to tetragwno
    /*
    Ks = vec3(texture(specularColorSampler, vertex_UV).rgb);
    Kd = vec3(texture(diffuseColorSampler, vertex_UV).rgb);
    Ka = vec3(0.1, 0.1, 0.1);
    Ns = 10;
    
    //*/

    // Task 2.3: model ambient intensity (Ia)
	vec3 Ia = La * Ka;
	//fragment_color = vec4(Ia, 1);

    // Task 3: model diffuse intensity
    // Task 3.3: transform light position, vertex position and vertex normal 
    // in camera space (N). Attention: vertex normal is a directional vector 
    // (Homogeneous Transformations).

	vec3 light_position_cameraspace = vec3(V * vec4(light_position_worldspace, 1));
	vec3 vertex_position_cameraspace = vec3(V * M * vec4(vertex_position_modelspace, 1));
	vec3 N = normalize(vec3(V * M * vec4(vertex_normal_modelspace, 0))); // w = -1 skoteiniazei
	
    // Task 3.4: calculate distance to light and normalized direction (L) in camera space 
	
	vec3 L = normalize(light_position_cameraspace - vertex_position_cameraspace);

    // Task 3.5: compute cos(theta)
    // cosine of the angle between the normal and the light direction, 
    // clamped above 0; use clamp(float, min, max)
    //  - light is at the vertical of the triangle -> 1
    //  - light is perpendicular to the triangle -> 0
    //  - light is behind the triangle -> 0

	float cosTheta = dot(L, N);
	vec3 Id = Ld * Kd * clamp(cosTheta, 0, 1);
	//fragment_color = vec4(Id + Ia, 0.55);
    
    // Task 3.6: calculate the diffuse intensity and the new fragment color
	//ola einai sto cameraspace ara 0,0,1 ta coordinates tou viewer 
	// antistrefw to L -> -L ara dot() R = -L + 2*dot(L, N)*N
	// entolh reflect

	vec3 E = normalize(-vertex_position_cameraspace);
	//vec3 R = -L + 2 * cosTheta * N;
    // Task 4: model specular intensity
    // Task 4.1: compute reflexion direction (R) in camera space
    vec3 R = reflect(-L, N);
    // Task 4.2: compute surface to viewer direction (E) in camera space

    // Task 4.3: compute cos(alpha)
    // cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0; use clamp(float, min, max)
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosAlpha = dot(E, R);
    // Task 4.4: calculate specular factor cos(a)^Ns
    vec3 Is = Ls * Ks * pow(clamp(cosAlpha, 0, 1), Ns);
    // Task 4.5: calculate the specular intensity and the new fragment color
    //fragment_color = vec4(Ia + Id + Is, 0.55);

    // Task 5: model the light distance effect (add a light_power parameter).
    // Change camera position to verify the correct behavior.
    
    // Task 7: create the spotlight effect
    //*/
    vec3 spot_dir = vec3(1,0,-1);
    float spot_dot = dot(spot_dir,-L);
    const float spot_arc = 1.0 - 20.0 / 90.0;
    float spot_factor = (spot_dot - spot_arc) / (1.0 - spot_arc);
    spot_factor = clamp(spot_factor,0.0, 1.0);
    if (spot_dot < spot_arc) spot_factor = 0.2;
    
    Id *= spot_factor;
    Is *= spot_factor;
    flat vec3 I = Ia + Id + Is;
	//vec3 I = Ia + Id + Is;
    fragment_color = vec4(I, 0.9);
    /*/
    // Homework 3: make light properties as uniform variables and use the keyboard  
    // keys to adjust them (position, light color and power).
    /*/
}