#version 330 core

// Interpolated values from the vertex shaders
in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in vec2 vertex_UV;

uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;
uniform sampler2D shadowMapSampler;
uniform mat4 V;

// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};

uniform Light light = Light(
    vec4(1, 1, 1, 1),
    vec4(1, 1, 1, 1),
    vec4(1, 1, 1, 1),
    vec3(0, 4, 4),
    20.0f
);

// materials
struct Material {
    vec4 Ka;
    vec4 Kd;
    vec4 Ks;
    float Ns;
};
uniform Material mtl = Material(
    vec4(0.24725, 0.1995, 0.0745, 1),
    vec4(0.75164, 0.60648, 0.22648, 1),
    vec4(0.628281, 0.555802, 0.366065, 1),
    51.2f
);

// Output data
out vec4 fragmentColor;

void phong();
float ShadowCalculation(vec4 fragPosLightSpace);

void main() {
    phong();
}

float ShadowCalculation(vec4 fragPosLightSpace) {
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMapSampler, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(vertex_normal_cameraspace);
    vec3 lightDir = normalize(light.lightPosition_worldspace - vertex_position_cameraspace);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMapSampler, 0);
    for(int x = -1; x <= 1; ++x) {
        for(int y = -1; y <= 1; ++y) {
            float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if (projCoords.z > 1.0)
        shadow = 0.0;
    return shadow;
}

void phong() {
	int useTexture = 1;
    vec4 _Ka = mtl.Ka;
	vec4 _Kd = mtl.Kd;
	vec4 _Ks = mtl.Ks;
    float _Ns = mtl.Ns;
	if (useTexture == 1) {
        _Ks = vec4(texture(specularColorSampler, vertex_UV).rgb, 1.0);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
        _Ka = vec4(0.1, 0.1, 0.1, 1.0);
        _Ns = 51.2f;
    }
    // model ambient intensity (Ia) including shadow
	//float shadow = ShadowCalculation(V * vec4(light.lightPosition_worldspace, 1.0));
    //vec4 Ia = (light.La + (1.0 - shadow)) * _Ka;
	vec4 Ia = light.La * _Ka;
    // model diffuse intensity (Id)
    vec3 N = normalize(vertex_normal_cameraspace);
    vec3 L = normalize((V * vec4(light.lightPosition_worldspace, 1)).xyz
			- vertex_position_cameraspace);
    float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta;
    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(-vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;
    // model the light distance effect
    float distance = length(light.lightPosition_worldspace
						- vertex_position_worldspace);
    float distance_sq = distance * distance;
    // final fragment color
    fragmentColor = vec4(
        Ia +
        Id * light.power / distance_sq +
        Is * light.power / distance_sq);
}
